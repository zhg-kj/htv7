{"ast":null,"code":"class localStorageTTL {}\nlocalStorageTTL.setWithExpiry = (key, value, ttl) => {\n  const now = new Date();\n\n  // `item` is an object which contains the original value\n  // as well as the time when it's supposed to expire\n  const item = {\n    value: value,\n    expiry: now.getTime() + ttl\n  };\n  localStorage.setItem(key, JSON.stringify(item));\n};\nlocalStorageTTL.getWithExpiry = key => {\n  const itemStr = localStorage.getItem(key);\n  // if the item doesn't exist, return null\n  if (!itemStr) {\n    return null;\n  }\n  const item = JSON.parse(itemStr);\n  const now = new Date();\n  // compare the expiry time of the item with the current time\n  if (now.getTime() > item.expiry) {\n    // If the item is expired, delete the item from storage\n    // and return null\n    localStorage.removeItem(key);\n    return null;\n  }\n  return item.value;\n};\nexport default localStorageTTL;","map":{"version":3,"names":["localStorageTTL","setWithExpiry","key","value","ttl","now","Date","item","expiry","getTime","localStorage","setItem","JSON","stringify","getWithExpiry","itemStr","getItem","parse","removeItem"],"sources":["/Users/allenxu/projects/htv7/htv7/htv7/client/src/components/localStorageTTL.js"],"sourcesContent":["class localStorageTTL {\n\n    static setWithExpiry = (key, value, ttl) => {\n            const now = new Date()\n        \n            // `item` is an object which contains the original value\n            // as well as the time when it's supposed to expire\n            const item = {\n                value: value,\n                expiry: now.getTime() + ttl,\n            }\n            localStorage.setItem(key, JSON.stringify(item))\n        }\n        \n        static getWithExpiry = (key) => {\n            const itemStr = localStorage.getItem(key)\n            // if the item doesn't exist, return null\n            if (!itemStr) {\n                return null\n            }\n            const item = JSON.parse(itemStr)\n            const now = new Date()\n            // compare the expiry time of the item with the current time\n            if (now.getTime() > item.expiry) {\n                // If the item is expired, delete the item from storage\n                // and return null\n                localStorage.removeItem(key)\n                return null\n            }\n            return item.value\n        }\n}\n\nexport default localStorageTTL;"],"mappings":"AAAA,MAAMA,eAAe,CAAC;AAAhBA,eAAe,CAEVC,aAAa,GAAG,CAACC,GAAG,EAAEC,KAAK,EAAEC,GAAG,KAAK;EACpC,MAAMC,GAAG,GAAG,IAAIC,IAAI,EAAE;;EAEtB;EACA;EACA,MAAMC,IAAI,GAAG;IACTJ,KAAK,EAAEA,KAAK;IACZK,MAAM,EAAEH,GAAG,CAACI,OAAO,EAAE,GAAGL;EAC5B,CAAC;EACDM,YAAY,CAACC,OAAO,CAACT,GAAG,EAAEU,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;AACnD,CAAC;AAZHP,eAAe,CAcNc,aAAa,GAAIZ,GAAG,IAAK;EAC5B,MAAMa,OAAO,GAAGL,YAAY,CAACM,OAAO,CAACd,GAAG,CAAC;EACzC;EACA,IAAI,CAACa,OAAO,EAAE;IACV,OAAO,IAAI;EACf;EACA,MAAMR,IAAI,GAAGK,IAAI,CAACK,KAAK,CAACF,OAAO,CAAC;EAChC,MAAMV,GAAG,GAAG,IAAIC,IAAI,EAAE;EACtB;EACA,IAAID,GAAG,CAACI,OAAO,EAAE,GAAGF,IAAI,CAACC,MAAM,EAAE;IAC7B;IACA;IACAE,YAAY,CAACQ,UAAU,CAAChB,GAAG,CAAC;IAC5B,OAAO,IAAI;EACf;EACA,OAAOK,IAAI,CAACJ,KAAK;AACrB,CAAC;AAGT,eAAeH,eAAe"},"metadata":{},"sourceType":"module"}